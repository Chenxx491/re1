/*
逆序对问题：
   在一个数组中，左边的数如果比右边的数大，则折两个数构成一个逆序对，请打印所有逆序对。

解题思路：
   其实依旧是利用归并排序的原理，将数据按从小到大排序，在排序的过程中就可找出逆序对。
   1. left指向已经排好序的左侧最小的数，right指向已经排好序的右侧最小的的数
   2. 当a[left]>a[right]时，产生逆序对
   3. 因为左侧已经按从小到大被排好，而最小的数已经大于a[right]，故从当前left到mid所指的数，都大于a[right],用一个for循环打印出来即可
 */

public class InversePairProblemTest {
    public static void main(String[] args) {
        int[] arr = {1,3,4,2,5,6};
        inversePair(arr);
    }

    private static void inversePair(int[] a){
        if (a==null || a.length < 2){
            return;
        }
        mergeSort(a,0,a.length-1);
    }

    private static void mergeSort(int[] a,int L,int R){
        if (L==R){
            return;
        }
        int mid = L + ((R-L)>>1);
        mergeSort(a,L,mid);
        mergeSort(a,mid+1,R);
        merge(a,L,mid,R);
    }

    private static void merge(int[] a,int L,int mid,int R){
        int[] help = new int[R-L+1];
        int left = L;
        int right = mid + 1;
        int i = 0;
        while (left<=mid && right<=R){
            if (a[left] > a[right]){
                for (int j = left; j <= mid; j++) {
                    System.out.print("[" + a[j] + "," + a[right] + "] ");
                }
            }
            help[i++] = a[left] < a[right] ? a[left++] : a[right++];
        }
        while (left <= mid){
            help[i++] = a[left++];
        }
        while (right <= R){
            help[i++] = a[right++];
        }
    }
}