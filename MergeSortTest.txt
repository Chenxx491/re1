/*
归并排序原理：
    1. 先分别将数组左侧和右侧排好序
    2. 准备两个指针left和right，分别指向已经排好序的左侧和右侧的第一个数（后边将分别对左、右侧进行遍历）
    3. 准备一个辅助数组help[]
    4. 比较left和right所指的数，谁大将谁填入到help[]中，并且该指针后移，然后继续比较，直到两个指针中有且只有一个越界
    5. 将未越界的指针后边的数copy进help[]
    6. 将已经排好序的help[]数组copy回原数组
算法复杂度：T(n) = 2T(n/2) + O(N) = O(N*logN)
注意：循环退出的条件，即边界问题
 */

import java.util.Arrays;
import java.util.Random;
public class MergeSortTest {
    public static void main(String[] args) {
        int length = 10;
        int value = 100;
        int times = 100000;
        boolean result = true;
        for (int i = 1; i <= times; i++) {
            int[] arr1 = randomSample(length, value);
            int[] arr2 = copyArray(arr1);
            mergeSort(arr1);
            right(arr2);
            if (!toCompareArray(arr1, arr2)) {
                result = false;
                printArray(arr1);
                printArray(arr2);
                break;
            }
        }
        System.out.println(result ? "成功！" : "失败！");
    }

    // 排序主函数
    private static void mergeSort(int[] a){
        if (a==null || a.length < 2){
            return;
        }
        sortPro(a,0,a.length-1);
    }

    // 对左右两侧数据分别排序
    private static void sortPro(int[] a,int L,int R){
        if (L==R){
            return;
        }
        int mid = L + ((R - L)>>1);           // L和R的终点位置R - L + 1
        sortPro(a,L,mid);
        sortPro(a,mid+1,R);
        merge(a,L,mid,R);
    }

    // 将排好序的左右两侧数据填入辅助数组
    private static void merge(int[] a,int L,int mid,int R){
        int[] help = new int[R-L+1];              // 准备一个辅助数组help[]
        int i = 0;                                // i 遍历help[]
        int left = L;                             // left指针指向左侧第一个数
        int right = mid+1;                        // right指针指向右侧第一个数
        while (left <= mid && right <= R){
            help[i++] = a[left] < a[right] ? a[left++]:a[right++];         // left和right所指的数谁小填谁，并后移一个
        }
        // 以下两个while循环必有且只有一个发生
        while (left <= mid){        // left未越界
            help[i++] = a[left++];
        }
        while (right <= R){          // right未越界
            help[i++] = a[right++];
        }
        // 将help[] copy 回原数组
        for (i = 0; i < help.length; i++) {
            a[L+i] = help[i];
        }
    }

    // 绝对正确的方法
    private  static int[] right(int[] ary) {
        Arrays.sort(ary);
        return ary;
    }

    // 随机产生样本器
    private  static int[] randomSample(int length, int numericalRange) {
        Random r = new Random();
        int[] arr = new int[r.nextInt(length) + 1];
        for (int i = 0; i < arr.length; i++) {
            arr[i] = r.nextInt(numericalRange);
        }
        return arr;
    }

    // 备份数组
    private  static int[] copyArray(int[] ary) {
        int[] copy = new int[ary.length];
        if (ary == null) {
            return null;
        } else {
            for (int i = 0; i < ary.length; i++) {
                copy[i] = ary[i];
            }
        }
        return copy;
    }

    // 比较数组
    private  static boolean toCompareArray(int[] arr1, int[] arr2) {
        if ((arr1 == null) && (arr2 == null))
            return true;
        else if ((arr1 == null) && (arr2 != null))
            return false;
        else if ((arr1 != null) && (arr2 == null))
            return false;
        else {
            if (arr1.length != arr2.length)
                return false;
            else {
                for (int i = 0; i < arr1.length; i++) {
                    if (arr1[i] != arr2[i])
                        return false;
                }
            }
        }
        return true;
    }

    // 打印数组
    private  static void printArray(int[] array) {
        for (int i = 0; i < array.length; i++) {
            System.out.print(array[i] + " ");
        }
        System.out.println();
    }

}
