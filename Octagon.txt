package octagon;

import java.util.logging.Level;
import java.util.logging.Logger;

public class Octagon extends GeometricObject implements Cloneable,Comparable<Octagon >{
    private double side;
    Octagon(double side){
        this.side = side;
    }
    Octagon(String color,boolean filled,double side){
        super(color,filled);
        this.side = side;
    }
    public double getSide(){
        return side;
    }
    public void setSide(double side){
        this.side = side;
    }
    public double getArea(){
        return (2 + 4 / Math.sqrt(2)) * side * side;
    }
    public double getPerimeter(){
        return 8 * side;
    }
    public int compareTo(Octagon O){
        if(getArea() > O.getArea())
            return 1;
        else if (getArea() < O.getArea())
            return -1;
        else
            return 0;
    }
    public String toString(){
        return super.toString() + "\nArea is: " + getArea() + " Perimeter is: " + getPerimeter();
    }
    public Object clone() throws CloneNotSupportedException{
        return super.clone();
    }
    public static void main(String[] args) {
     Octagon octagon1 = new Octagon(5.0);
     System.out.println(octagon1.toString());
        try {
            Octagon octagon2 = (Octagon)octagon1.clone();
    System.out.println("（大于返回 1，小于返回 -1，等于返回 0）返回值: " + octagon1.compareTo(octagon2));
        } catch (CloneNotSupportedException ex) {
            Logger.getLogger(Octagon.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
}






package octagon;

import java.util.Date;

abstract class GeometricObject{
    private String color = "white";
    private boolean filled;
    private Date dateCreated;
    protected GeometricObject(){
        dateCreated = new Date();
    }
    protected GeometricObject(String color,boolean filled){
        dateCreated = new Date();
        this.color = color;
        this.filled = filled;
    }
    public String getColor(){
        return color;
    }
    public void setColor(String color){
        this.color = color;
    }
    public boolean isFilled(){
        return filled;
    }
    public void setFilled(boolean filled){
        this.filled = filled;
    }
    public Date getDateCreated(){
        return dateCreated;
    }
    @Override
    public String toString(){
        return "created on " + dateCreated + "\ncolor: " + color + " and filled: " + filled;
    }
    public abstract double getArea();
    public abstract double getPerimeter();
}