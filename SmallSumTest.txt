/*
小和问题:
   在一个数组中，每一个数左边比当前数小的数累加起来，叫做这个数组的小和。求一个数组 的小和。
   例子： [1,3,4,2,5]：1左边比1小的数，没有；3左边比3小的数，1； 4左边比4小的数，1、3；2左边比2小的数，1；
         5左边比5小的数，1、3、4、2；所以小和为1+1+3+1+1+3+4+2=16
 */

public class SmallSumTest {
    public static void main(String[] args) {
        int[] arr = {1,3,4,2,5};
        System.out.println(smallSum(arr));
    }

    private static int smallSum(int[] a){
        if (a==null || a.length < 2){
            return 0;
        }
        return mergeSort(a,0,a.length-1);
    }

    private static int mergeSort(int[] a,int L,int R){
        if (L==R){
            return 0;
        }
        // mid = (L+R) / 2，不安全，L+R可能会溢出
        int mid = L + ((R- L)>>1);           // 防止溢出，等价于：(R-L)/2 + L；一个数除以2等于这个数右移一位：>>1；位运算比算术运算快
        return mergeSort(a,L,mid) + mergeSort(a,mid+1,R) + merge(a,L,mid,R);
    }

    private static int merge(int[] a,int L,int mid,int R){
        int[] help = new int[R-L+1];
        int left = L;
        int right = mid + 1;
        int i = 0;
        int result = 0;
        while (left<=mid && right<=R){
            result += a[left]< a[right] ? a[left]*(R-right+1) : 0;
            help[i++] = a[left] < a[right] ? a[left++] : a[right++];
        }
        while (left <= mid){
            help[i++] = a[left++];
        }
        while (right <= R){
            help[i++] = a[right++];
        }
        return result;
    }
}
