import java.util.Date;

abstract class GeometricObject{
    private String color = "white";
    private boolean filled;
    private Date dateCreated;
    protected GeometricObject(){
        dateCreated = new Date();
    }
    protected GeometricObject(String color,boolean filled){
        dateCreated = new Date();
        this.color = color;
        this.filled = filled;
    }
    public String getColor(){
        return color;
    }
    public void setColor(String color){
        this.color = color;
    }
    public boolean isFilled(){
        return filled;
    }
    public void setFilled(boolean filled){
        this.filled = filled;
    }
    public Date getDateCreated(){
        return dateCreated;
    }
    @Override
    public String toString(){
        return "created on " + dateCreated + "\ncolor: " + color + " and filled: " + filled;
    }
    public abstract double getArea();
    public abstract double getPerimeter();
}

public class Square extends GeometricObject implements Colorable{
    private double side;
    Square(){
        
    }
    Square(String color,boolean filled,double side){
        super(color,filled);
        this.side = side;
    }
    public double getSide(){
        return side;
    }
    public void setSide(double side){
        this.side = side;
    }
    @Override
    public double getArea(){
        return side * side;
    }
    @Override
    public double getPerimeter(){
        return 4 * side;
    }
    @Override
    public void howToColor(){
        if(isFilled())
            System.out.println("Color all four sides");
    }
    public static void main(String[] args) {
        GeometricObject[] S = {
            new Square("red",false,3.0),
            new Square("pink",true,4.0),
            new Square("black",true,5.0),
            new Square("blue",false,6.0),
            new Square("green",true,7.0)};
        for(int i = 0; i<S.length;i++){
                System.out.println("Square" + i + "\n"+ S[i]);
                ((Square)S[i]).howToColor();
        }
    }
}

public interface Colorable {
    public abstract void howToColor();
}