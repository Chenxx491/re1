/*
问题描述
　　给定n个十六进制正整数，输出它们对应的八进制数。

输入格式
　　输入的第一行为一个正整数n （1<=n<=10）。
　　接下来n行，每行一个由0~9、大写字母A~F组成的字符串，表示要转换的十六进制正整数，每个十六进制数长度不超过100000。

输出格式
　　输出n行，每行为输入对应的八进制正整数。

　　【注意】
　　输入的十六进制数不会有前导0，比如012A。
　　输出的八进制数也不能有前导0。

样例输入
　　2
　　39
　　123ABC

样例输出
　　71
　　4435274

　　【提示】
　　先将十六进制数转换成某进制数，再由某进制数转换成八进制。


此题用了StringBuffer:
   1. String substring(int start,int end) 返回子串
   2. append 追加子串
备注：评测通过
 */

import java.util.Scanner;
public class Test02 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String[] str = new  String[n];
        for (int i = 0; i < n; i++) {
            str[i] = scanner.next();
        }
        for (int i = 0; i < n; i++) {
            String str1 = hexaToBinary(str[i]);
            if (str1.length()%3 == 1){
                str1 = "00" + str1;
            }
            else if (str1.length()%3 == 2){
                str1 = "0" + str1;
            }
            System.out.println(octalToBinary(str1));
        }
    }

    private static String hexaToBinary(String str){                 // 十六进制转二进制
        char[] ch = str.toCharArray();
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i < ch.length; i++) {
            switch (ch[i]){
                case '0':buffer.append("0000");break;
                case '1':buffer.append("0001");break;
                case '2':buffer.append("0010");break;
                case '3':buffer.append("0011");break;
                case '4':buffer.append("0100");break;
                case '5':buffer.append("0101");break;
                case '6':buffer.append("0110");break;
                case '7':buffer.append("0111");break;
                case '8':buffer.append("1000");break;
                case '9':buffer.append("1001");break;
                case 'A':buffer.append("1010");break;
                case 'B':buffer.append("1011");break;
                case 'C':buffer.append("1100");break;
                case 'D':buffer.append("1101");break;
                case 'E':buffer.append("1110");break;
                case 'F':buffer.append("1111");break;
                default:break;
            }
        }
        return buffer.toString();
    }

    private static String octalToBinary(String str){                        // 二进制转八进制
        StringBuffer buffer = new StringBuffer();
        int k = 0;
        if (str.substring(0,3).equals("000")){
            k = 3;
        }else k = 0;
        for (int i = k; i < str.length()-2; i+=3) {
            switch (str.substring(i,i+3)){
                case "000":buffer.append("0");break;
                case "001":buffer.append("1");break;
                case "010":buffer.append("2");break;
                case "011":buffer.append("3");break;
                case "100":buffer.append("4");break;
                case "101":buffer.append("5");break;
                case "110":buffer.append("6");break;
                case "111":buffer.append("7");break;
                default:break;
            }
        }
        return buffer.toString();
    }
}
