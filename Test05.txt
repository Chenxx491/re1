/*
题目：K好数
问题描述
如果一个自然数N的K进制表示中任意的相邻的两位都不是相邻的数字，那么我们就说这个数是K好数。求L位K进制数中K好数的数目。
例如K = 4，L = 2的时候，所有K好数为11、13、20、22、30、31、33 共7个。由于这个数目很大，请你输出它对1000000007取模后的值。

输入格式
输入包含两个正整数，K和L。

输出格式
输出一个整数，表示答案对1000000007取模后的值。
样例输入
4 2
样例输出
7
数据规模与约定
对于30%的数据，KL <= 106；

对于50%的数据，K <= 16， L <= 10；

对于100%的数据，1 <= K,L <= 100。

解题思路：
  1. 创建一个L行K列的二维数组R[L][K]，将第0行置0
  2. 以K=4为例讲解：当L=1时，以0结尾的K好数有0个,所以R[1][0]=0，以1,2,3结尾的分别有1个,所以R[1][1]=R[1][2]=R[1][3]=1
  3. 当L=2时，以0结尾的有20,30,两个，所以R[2][0]=R[1][0]+R[1][2]+R[1][3]=0+1+1=2
              以1结尾的有11,31两个，所以R[2][1]=R[1][0]+R[1][1]+R[1][3]=0+1+1=2
              以2结尾的有22一个，所以R[2][2]=R[1][0]+R[2][2]=0+1=1
              以3结尾的有13,33两个，所以R[2][3]=R[1][0]+R[1][1]+R[1][3]=0+1+1=2
  4. L=3,4...类推下去即可
  5. 最后将L行的K列都加起来就是所有的K好数个数，先求余再相加即最后输出的结果
  6. 考虑到大数，所以最后的结果用BigInteger存放

  备注：通过
 */

import java.math.BigInteger;
import java.util.Scanner;
public class Test05 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        int L = scanner.nextInt();
        int[][] r = new int[L+1][K];      // 创建一个L行K列的二维数组R
        for (int i = 0; i < K ; i++) {
            r[0][i] = 0;                   // 将第0行置0
        }
        r[1][0] = 0;
        for (int i = 1; i < K; i++) {
            r[1][i] = 1;
        }
        for (int i = 2; i < L+1; i++) {
            for (int j = 0; j < K; j++) {
                for (int k = 0; k < K; k++) {
                    if ((j!=k-1)&&(j!=k+1)){              // 排除相邻的数
                        r[i][j] = (r[i][j] + r[i-1][k])%1000000007;
                    }
                }
            }
        }
        BigInteger sum = new BigInteger("0");
        for (int i = 0; i < K; i++) {
            sum = sum.add(new BigInteger(Integer.toString(r[L][i])));
        }
        System.out.println(sum.mod(new BigInteger("1000000007")));
    }
}
